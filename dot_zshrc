#!/bin/zsh
# .zshrc --- Configure zsh interactive shells
# Mike Barker <mike@thebarkers.com>
# Created on: November 3rd, 2022
# Updated on: August 24th, 2024

# Define the location for oh-my-zsh and custom plugins and themes
ZSH=$HOME/.oh-my-zsh
ZSH_CUSTOM=$ZSH/custom

# Clone the oh-my-zsh reposiotry
if [[ ! -d $ZSH ]]; then
    git clone https://github.com/ohmyzsh/ohmyzsh.git $ZSH
fi

# Clone spaceship-prompt/spaceship-prompt
if [[ ! -d $ZSH_CUSTOM/themes/spaceship-prompt ]]; then
    git clone https://github.com/spaceship-prompt/spaceship-prompt.git $ZSH_CUSTOM/themes/spaceship-prompt --depth=1
    ln -s $ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme $ZSH_CUSTOM/themes/spaceship.zsh-theme
fi

# Clone z-shell/zsh-eza, if eza is installed
if [[ $(command -v eza) ]]; then
    if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-eza" ]]; then
        git clone https://github.com/z-shell/zsh-eza.git $ZSH_CUSTOM/plugins/zsh-eza
    fi
fi

# Clone zsh-users/zsh-autosuggestions
if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-autosuggestions" ]]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions
fi

# Clone zsh-users/zsh-completions
if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-completions" ]]; then
    git clone https://github.com/zsh-users/zsh-completions $ZSH_CUSTOM/plugins/zsh-completions
    fpath+="$ZSH_CUSTOM/custom/plugins/zsh-completions/src"
fi

# Clone zsh-users/zsh-syntax-highlighting
if [[ ! -d "$ZSH_CUSTOM/plugins/zsh-syntax-highlighting" ]]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting
fi

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME=robbyrusell

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Only setup a prompt if the term is not dumb (emacs shell)
if [[ $TERM != dumb ]]; then
    # If starship is installed and not running in xterm, use it
    if [[ $(command -v starship) ]] && [[ $TERM != xterm ]]; then
        # Starship Cross Platform Prompt
        # The minimal, blazing-fast, and infinitely customizable prompt for any shell!
        # https://starship.rs/
        # The ~/.config/starship.toml file is used to configure the prompt.
        eval "$(starship init zsh)"
    else
        # Spaceship theme
        # https://denysdovhan.com/spaceship-prompt/
        ZSH_THEME="spaceship"
        # Disable kubecontext
        export SPACESHIP_KUBECTL_CONTEXT_SHOW='false'
    fi
fi

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
zstyle ':omz:update' frequency 7

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# zoxide customization
# ZOXIDE_CMD_OVERRIDE=cd

# iTerm Shell Integration Script
if [[ "$TERM_PROGRAM" == "iTerm.app" ]] then
    zstyle :omz:plugins:iterm2 shell-integration yes
fi

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    command-not-found
    zsh-autosuggestions
    zsh-syntax-highlighting
)
# Add these plugins if the associated command is installed
if [[ $(command -v brew) ]]; then
    fpath+="$(brew --prefix)/share/zsh/site-functions"
    plugins+=(brew)
fi
[[ $(command -v code) ]] && plugins+=(vscode)
[[ $(command -v direnv) ]] && plugins+=(direnv)
[[ $(command -v eza) ]] && plugins+=(zsh-eza)
[[ $(command -v fzf) ]] && plugins+=(fzf)
[[ $(command -v git) ]] && plugins+=(git)
[[ "$TERM_PROGRAM" == "iTerm.app" ]] && plugins+=(iterm2)
[[ $(command -v nvm) ]] && plugins+=(nvm)
[[ $(command -v tmux) ]] && plugins+=(tmux)
[[ $(command -v zoxide) ]] && plugins+=(zoxide)

# Initialize oh-my-zsh
source $ZSH/oh-my-zsh.sh

##
# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

##
# 1password cli op command completion
if [[ "$(command -v op)" ]]; then
    eval "$(op completion zsh)"; compdef _op op
fi

##
# 1Password cli `op` third party plugins configuration
op_plugins="$HOME/.config/op/plugins.sh"
if [[ -f "$op_plugins" ]]; then
    source "$op_plugins"
fi

## 1password agent.sock configuration
# Export the SSH_AUTH_SOCK
# Handle macos that by default stores the agent socket file in the users Library folder
# by creating a .1password folder and symlinking the agent.soc file to there.
op_agent_sock="$HOME/.1password/agent.sock"
op_agent_sock_macos="$HOME/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
if  [[ -e "$op_agent_sock_macos" && ! -e "$op_agent_sock" ]]; then
    mkdir -p $HOME/.1password
    ln -s "$op_agent_sock_macos" "$op_agent_sock"
fi
[[ -e "$op_agent_sock" ]] && export SSH_AUTH_SOCK="$op_agent_sock"

##
# atuin history manager
if [[ "$(command -v atuin)" ]]; then
    eval "$(atuin init zsh  --disable-up-arrow)"
fi

##
# Ghostty terminal fixups
if [[ "$TERM" == "xterm-ghostty" ]]; then
    # Check if terminfo is avaliable, if not fall back to xterm-256color
    if [[ ! $(toe | grep 'ghostty') ]]; then
        export TERM=xterm-256color
    fi
fi

##
# fzf additional setup, if 'fzf' and 'fd' installed
if [[ "$(command -v fzf)" && "$(command -v fd)" ]]; then
    # Use 'fd' to find files and directories
    export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git --exclude .venv"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git --exclude .venv"

    # Use 'fd' to list path canidates
    _fzf_compgen_path() {
        fd --hidden --exclude .git --exclude .venv . "$1"
    }

    # Use 'fd' to list directory canidates
    _fzf_compgen_dir() {
        fd --type=d --hidden --exclude .git --exclude .venv . "$1"
    }
fi 
